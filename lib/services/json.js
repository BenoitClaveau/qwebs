/*!
 * qwebs
 * Copyright(c) 2017 Beno√Æt Claveau <benoit.claveau@gmail.com>
 * MIT Licensed
 */
 
"use strict";

const WebError = require("./../WebError");
const DATE_PATTERN = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/;

/**
 * JSON is define as a service to easily orverride it. 
 * Inject in yours services.json
 */
class JsonService {
    constructor() {
    };

    stringify(value) {

    }

    parse(text) {
        return JSON.parse(text, this.reviver.bind(this))
    };

    reviver(key, value) {
      if (this.isDate(value)) return new Date(value);
      return value;
    }

    isDate(value) {
      return DATE_PATTERN.test(value);
    }
};

exports = module.exports = JsonService;

/*
var DBRef, ISODate, MSON, ObjectId, bson, makeFieldLiterals, stringifyArray, stringifyDbRef, stringifyPlainObject;

bson = require('bson');

ObjectId = bson.BSONPure.ObjectID;

DBRef = bson.BSONPure.DBRef;

ISODate = function(ISODateString) {
  return new Date(ISODateString);
};

module.exports = MSON = {};

MSON.stringify = function(value) {
  var ref;
  JSON.stringify(value);
  if (typeof value === "function") {
    return void 0;
  }
  if (typeof value === "undefined") {
    return void 0;
  }
  if (value === null) {
    return "null";
  }
  if (value.constructor.name === "DBRef") {
    return stringifyDbRef(value);
  }
  if (value.constructor.name === "ObjectID") {
    return "ObjectId(\"" + (value.toString()) + "\")";
  }
  if (value instanceof Date) {
    return "ISODate(\"" + (value.toISOString()) + "\")";
  }
  if (value instanceof Array) {
    return stringifyArray(value);
  }
  if (typeof value !== "object") {
    return JSON.stringify(value);
  }
  if ((ref = value.constructor.name) === "Number" || ref === "String" || ref === "Boolean") {
    return JSON.stringify(value);
  }
  if (value.constructor.name === "Object") {
    return stringifyPlainObject(value);
  }
  throw new Error("Object contains value with unknown prototype '" + value.constructor.name + "'");
};

MSON.parseUnsafe = function(value) {
  return eval("(" + value + ")");
};

stringifyPlainObject = function(object) {
  return "{" + makeFieldLiterals(object).join(",") + "}";
};

makeFieldLiterals = function(object) {
  var key, ref, results, value;
  results = [];
  for (key in object) {
    value = object[key];
    if ((ref = typeof value) !== "function" && ref !== "undefined") {
      results.push(JSON.stringify(key) + ":" + MSON.stringify(value));
    }
  }
  return results;
};

stringifyDbRef = function(dbRef) {
  var refJSON;
  refJSON = {};
  refJSON.$ref = dbRef.namespace;
  refJSON.$id = dbRef.oid;
  if (dbRef.db != null) {
    refJSON.$db = dbRef.db;
  }
  return JSON.stringify(refJSON);
};

stringifyArray = function(array) {
  var value;
  return "[" + ((function() {
    var i, len, results;
    results = [];
    for (i = 0, len = array.length; i < len; i++) {
      value = array[i];
      results.push(MSON.stringify(value));
    }
    return results;
  })()).join(",") + "]";
};

// ---
// generated by coffee-script 1.9.2
*/

/*

*/