{
  "name": "sass.js",
  "version": "0.6.3",
  "title": "Sass.js - API for emscripted libsass",
  "description": "Sass.js is a convenience API for the JavaScript libsass (compiled with Emscripten)",
  "homepage": "http://medialize.github.com/sass.js/",
  "author": {
    "name": "Rodney Rehm",
    "url": "http://rodneyrehm.de/"
  },
  "contributors": [
    {
      "name": "Sebastian Golasch",
      "url": "http://asciidisco.com/"
    },
    {
      "name": "Christian Kruse",
      "url": "http://http://wwwtech.de/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/medialize/sass.js.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license"
    }
  ],
  "keywords": [
    "libsass",
    "sass",
    "scss",
    "css"
  ],
  "main": "./dist/sass.min.js",
  "scripts": {
    "build": "grunt build",
    "test": "grunt test",
    "lint": "grunt lint"
  },
  "files": [
    "dist/"
  ],
  "devDependencies": {
    "benchmark": "~1.0.0",
    "chai": "~1.8.1",
    "grunt": "~0.4.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-mocha-test": "~0.8.1",
    "grunt-shell": "^1.1.1",
    "jshint-stylish": "~0.1.5",
    "node-sass": "~0.8.1"
  },
  "readme": "# Sass.js\n\nSass parser in JavaScript. This is a convenience API for emscripted [libsass](https://github.com/sass/libsass) (at v3.1.0). If you're looking to run Sass in node, you're probably looking for [node-sass](https://github.com/andrew/node-sass). Sass.js and node-sass should generate the same results.\n\n> A fair warning: minified it's 2.2MB, gzipped it's 611KB. [node-sass](https://github.com/andrew/node-sass) is about 20 times faster than Sass.js\n\nsee the [live demo](http://medialize.github.com/sass.js/)\n\n\n## Loading the Sass.js API\n\nSass.js comes in two flavors â€“ the synchronous in-document `sass.js` and the asynchronous worker `sass.worker.js`. The primary API - wrapping the Emscripten runtime - is provided with `sass.js` (it is used internally by `sass.worker.js` as well). `sass.worker.js` mimics the same API (adding callbacks for the asynchronous part) and passes all the function calls through to the [web worker](https://developer.mozilla.org/en/docs/Web/API/Worker).\n\n```html\n<script src=\"dist/sass.worker.js\"></script>\n<script>\n  // loading libsass.worker\n  Sass.initialize('dist/worker.min.js');\n\n  var scss = '$someVar: 123px; .some-selector { width: $someVar; }';\n  Sass.compile(scss, function(css) {\n      console.log(css);\n  });\n</script>\n```\n\nIt is possible - but *not recommended* to use sass.js without in the main RunLoop instead of using a Worker:\n\n```html\n<script src=\"dist/sass.min.js\"></script>\n<script>\n  var scss = '$someVar: 123px; .some-selector { width: $someVar; }';\n  var css = Sass.compile(scss);\n  console.log(css);\n</script>\n```\n\nYou can - for debugging purposes - load `sass.js` from source files. Emscripten litters the global scope with ~400 variables, so this MUST never be used in production!\n\n> Note: you need to have run `grunt build:libsass` before this is possible\n\n```html\n<script src=\"libsass/libsass/lib/libsass.js\"></script>\n<script src=\"src/sass.js\"></script>\n<script>\n  var scss = '$someVar: 123px; .some-selector { width: $someVar; }';\n  var css = Sass.compile(scss);\n  console.log(css);\n</script>\n```\n\n---\n\n\n## Using the Sass.js API\n\n```js\n// compile text to SCSS\nSass.compile(text, function callback(result) {\n  // (string) result is the compiled CSS\n});\n\n// set compile style options\nSass.options({\n  // format output: nested, expanded, compact, compressed\n  style: Sass.style.nested,\n  // add line comments to output: none, default\n  comments: Sass.comments.none\n}, function callback(){});\n\n// register a file to be available for @import\nSass.writeFile(filename, text, function callback(success) {\n  // (boolean) success is\n  //   `true` when the write was OK,\n  //   `false` when it failed\n});\n\n// remove a file\nSass.removeFile(filename, function callback(success) {\n  // (boolean) success is\n  //   `true` when deleting the file was OK,\n  //   `false` when it failed\n});\n\n// get a file's content\nSass.readFile(filename, function callback(content) {\n  // (string) content is the file's content,\n  //   `undefined` when the read failed\n});\n\n// list all files (regardless of directory structure)\nSass.listFiles(function callback(list) {\n  // (array) list contains the paths of all registered files\n});\n```\n\n### Using the synchronous, non-worker API\n\n```js\n// compile text to SCSS\nvar result = Sass.compile(text);\n\n// set compile style options\nSass.options({\n  // format output: nested, expanded, compact, compressed\n  style: Sass.style.nested,\n  // add line comments to output: none, default\n  comments: Sass.comments.none\n});\n\n// register a file to be available for @import\nvar success = Sass.writeFile(filename, text);\n\n// remove a file\nvar success = Sass.removeFile(filename);\n\n// get a file's content\nvar content = Sass.readFile(filename);\n\n// list all files (regardless of directory structure)\nvar list = Sass.listFiles();\n```\n\n### Working With Files\n\nChances are you want to use one of the readily available Sass mixins (e.g. [drublic/sass-mixins](https://github.com/drublic/Sass-Mixins) or [Bourbon](https://github.com/thoughtbot/bourbon)). While Sass.js doesn't feature a full-blown \"loadBurbon()\", registering files is possible:\n\n```js\nSass.writeFile('one.scss', '.one { width: 123px; }');\nSass.writeFile('some-dir/two.scss', '.two { width: 123px; }');\nSass.compile('@import \"one\"; @import \"some-dir/two\";', function(result) {\n  console.log(result);\n});\n```\n\noutputs\n\n```css\n.one {\n  width: 123px; }\n\n.two {\n  width: 123px; }\n```\n\n---\n\n\n## Building sass.js ##\n\n```bash\ngrunt build\n# destination:\n#   dist/sass.js\n#   dist/sass.min.js\n#   dist/sass.worker.js\n#   dist/worker.js\n#   dist/worker.min.js\n```\n\n### Building libsass.js ###\n\n```bash\n# using grunt:\ngrunt build:libsass\n# using bash:\n(cd libsass && build-libsass.sh)\n\n# destination:\n#   libsass/libsass/lib/libsass.js\n```\n\n---\n\n\n## Changelog\n\n### 0.6.3 (March 3rd 2015) ###\n\n* fixing invalid source error handling ([#23](https://github.com/medialize/sass.js/issues/23))\n\n### 0.6.2 (January 22nd 2015) ###\n\n* fixing `Makefile.patch` for \"memory file\" to work with emscripten 1.29\n\n### 0.6.1 (January 5th 2015) ###\n\n* fixing `Makefile.patch` to work with libsass 3.1.0\n* upgrading to [libsass 3.1.0](https://github.com/sass/libsass/releases/tag/3.1.0)\n\n### 0.6.0 (December 23rd 2014) ###\n\n* adding `grunt build:libsass` to make libsass.js ([#15](https://github.com/medialize/sass.js/issues/15))\n* making absolute paths work via symlinks ([#19](https://github.com/medialize/sass.js/issues/19))\n\n### 0.5.0 (August 31st 2014) ###\n\n* upgrading to [libsass 2.1.0-beta](https://github.com/hcatlin/libsass/releases/tag/2.1.0-beta)\n\n### 0.4.0 (June 6th 2014) ###\n\n* upgrading to [libsass v2.0](https://github.com/hcatlin/libsass/releases/tag/v2.0) - Sending [#386](https://github.com/hcatlin/libsass/pull/386), [#387](https://github.com/hcatlin/libsass/pull/387), [#388](https://github.com/hcatlin/libsass/pull/388)\n\n### 0.3.0 (April 5th 2014) ###\n\n* upgrading to [libsass @1122ead...](https://github.com/hcatlin/libsass/commit/1122ead208a8d1c438daaca70041ef6dd2361fa0) (to be on par with [node-sass](https://github.com/andrew/node-sass) [v.0.8.3](https://github.com/andrew/node-sass/releases/tag/v0.8.3))\n\n### 0.2.0 (January 16th 2014) ###\n\n* using libsass at v1.0.1 (instead of building from master)\n* adding `grunt build` to generate `dist` files\n* adding mocha tests `grunt test`\n\n### 0.1.0 (January 13th 2014) ###\n\n* Initial Sass.js\n\n## Authors\n\n* [Christian Kruse](https://github.com/ckruse) - [@cjk101010](https://twitter.com/cjk101010)\n* [Sebastian Golasch](https://github.com/asciidisco) - [@asciidisco](https://twitter.com/asciidisco)\n* [Rodney Rehm](http://rodneyrehm.de/en/) - [@rodneyrehm](https://twitter.com/rodneyrehm)\n\n\n## License\n\nSass.js is - as [libsass](https://github.com/hcatlin/libsass) and [Emscripten](https://github.com/kripken/emscripten/) are - published under the [MIT License](http://opensource.org/licenses/mit-license).\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/medialize/sass.js/issues"
  },
  "_id": "sass.js@0.6.3",
  "dist": {
    "shasum": "96e51f718d8efd3cdbcaf037dd7a9b6ce0a9e6a7"
  },
  "_from": "sass.js@0.6.3",
  "_resolved": "https://registry.npmjs.org/sass.js/-/sass.js-0.6.3.tgz"
}
